- nesting_level ||= 0
- list_type = 'a' if nesting_level == 0
- achievement = Achievement.where(user: @user, achievable: requirement).first
- completed = requirement.completed_by?(user: @user) || achievement.present?

li
  - if @unit.present? && @membership.present?
    .custom-control.custom-checkbox
      = check_box_tag "requirement_#{ requirement.id }",            \
                      requirement.id,                               \
                      completed,                                    \
                      class: 'custom-control-input',                \
                        disabled: !requirement.leaf?,               \
                        onclick: 'recordAchievement(this);',        \
                        data: { achievement: achievement&.id || 0 }

      = label_tag "requirement_#{ requirement.id }", requirement.name, class: 'custom-control-label'
  - else
    = requirement.name

- if requirement.requirements.present?
  ol.requirements(type="#{ list_type }")
    = render partial: 'requirements/show/requirement', collection: requirement.requirements

- if @unit.present? && @membership.present?
  javascript:
    function recordAchievement(box) {
      var requirementId = $(box).val();
      var achievementId = $(box).attr('data-achievement');

      if (achievementId == 0) {
        // POST a new achievement
        var path = "#{ membership_achievements_path(@membership) }";
        var json = ('{ "achievement" : { "achievable_id" : ' + requirementId + ' } }');
        $.ajax({
          type:     'POST',
          dataType: 'json',
          contentType: 'application/json',
          url:      path,
          data:     json
        });
      } else {
        // DELETE an existing achievement
        var path = '/advancement/' + achievementId;
        $.ajax({
          type:     'DELETE',
          dataType: 'json',
          contentType: 'application/json',
          url:      path,
        });
        $(box).attr('data-achievement', '0');
      }
    }
